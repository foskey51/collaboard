import React, { useState, useRef, useEffect } from "react";
import { Stage, Layer, Line } from "react-konva";
import useStore from "../store";

const PenTool = () => {
  const { screenWidth, screenHeight } = useStore.getState();
  const [lines, setLines] = useState([]);
  const [isDrawing, setIsDrawing] = useState(false);
  const [color, setColor] = useState("black"); // Pen color
  const stageRef = useRef(null);
  const layerRef = useRef(null);

  console.log(screenHeight, screenWidth);

  const handleMouseDown = (e) => {
    setIsDrawing(true);
    const pos = e.target.getStage().getPointerPosition();

    console.log(`Drawing started at: ${pos.x}, ${pos.y}`);

    setLines((prevLines) => [
      ...prevLines,
      { id: Math.floor(Math.random() * Number.MAX_SAFE_INTEGER) + 1, points: [pos.x / screenWidth, pos.y / screenHeight], color }
    ]);
  };

  const handleMouseMove = (e) => {
    if (!isDrawing) return;
    const pos = e.target.getStage().getPointerPosition();
    const newLines = [...lines];
    newLines[newLines.length - 1].points = [
      ...newLines[newLines.length - 1].points,
      pos.x / screenWidth,
      pos.y / screenHeight
    ];

    setLines(newLines);
    console.log(`Drawing at: ${pos.x}, ${pos.y}`); // Log current position
  };

  const handleMouseUp = () => {
    setIsDrawing(false);
    console.log("Drawing finished");
    console.log("Current lines: ", lines);
  };


  const denormalizePoints = (normalizedPoints) => {
    return normalizedPoints.map((point, index) => {
      if (index % 2 === 0) {
        return point * screenWidth;
      } else {
        return point * screenHeight;
      }
    });
  };

  const drawOrUpdateLine = (args) => {
    const { id, points, color, lineThickness, lineType } = args;
    if (id) {
      setLines((prevLines) =>
        prevLines.map((line) =>
          line.id === id
            ? { ...line, points: points, color, lineThickness, lineType }
            : line
        )
      );
      console.log(`Line with ID ${id} updated:`, { points, color });
    } else {
      setLines((prevLines) => [
        ...prevLines,
        {
          id: Math.floor(Math.random() * Number.MAX_SAFE_INTEGER) + 1,
          points,
          color,
          lineThickness,
          lineType
        }
      ]);
      console.log("New line drawn:", { points, color });
    }
  };

  return (
    <div>
      <div>
        <label>Select Color: </label>
        <input
          type="color"
          value={color}
          onChange={(e) => setColor(e.target.value)}
        />
      </div>

      <Stage
        width={window.innerWidth}
        height={window.innerHeight}
        ref={stageRef}
        onMouseDown={handleMouseDown}
        onMouseMove={handleMouseMove}
        onMouseUp={handleMouseUp}
      >
        <Layer ref={layerRef}>
          {/* Render the lines */}
          {lines.map((line) => (
            <Line
              key={line.id}
              points={line.points}
              stroke={line.color}
              strokeWidth={5}
              tension={0.5}
              lineCap="round"
              lineJoin="round"
            />
          ))}
        </Layer>
      </Stage>

      <div>
        <h3>Control Function Example (Call this to update/draw a line):</h3>
        <button
          onClick={() => {
            // Example of how to call drawOrUpdateLine function (can be passed by another user)
            drawOrUpdateLine({
              id: null, // No ID for new line
              points: [100, 100, 150, 150, 200, 200],
              color: "blue",
            });
          }}
        >
          Draw Blue Line
        </button>

        <button
          onClick={() => {
            // Example of updating an existing line by ID
            const existingLineId = lines[0]?.id;
            if (existingLineId) {
              drawOrUpdateLine({
                id: existingLineId,
                points: [50, 50, 100, 100, 150, 150], // Update points
                color: "red", // Change color
              });
            }
          }}
        >
          Update Line (Red)
        </button>
      </div>
    </div>
  );
};

export default PenTool;










const handleMouseUp = () => {
    setIsDrawing(false);
    console.log("Drawing finished");
  
    // Denormalize points of the last line captured
    const lastLine = lines[lines.length - 1]; // Get the last drawn line
    if (lastLine) {
      const denormalizedPoints = lastLine.points.map((point, index) => {
        return index % 2 === 0 // X coordinates
          ? point * screenWidth // Denormalize X
          : point * screenHeight; // Denormalize Y
      });
  
      // Update the line with denormalized points
      setLines((prevLines) =>
        prevLines.map((line) =>
          line.id === lastLine.id
            ? { ...line, points: denormalizedPoints } // Update the points
            : line
        )
      );
  
      console.log("Denormalized points for the last line:", denormalizedPoints);
    }
    
    console.log("Current lines: ", lines);
  };
